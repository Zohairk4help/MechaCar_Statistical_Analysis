# Deliverable 1

head(MechaCar_mpg_table)

# Performed Multiple Linear Regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg_table) #generate multiple linear regression model

# #generate summary statistics
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg_table))

# linear model to proove that no variables have slope coefficient of 0. 
model <- lm(mpg ~ vehicle_length,MechaCar_mpg_table) #create linear model
yvals <- model$coefficients['vehicle_length']*MechaCar_mpg_table$vehicle_length +
model$coefficients['(Intercept)'] #determine y-axis values from linear model

model <- lm(mpg ~ vehicle_weight,MechaCar_mpg_table) #create linear model
yvals <- model$coefficients['vehicle_weight']*MechaCar_mpg_table$vehicle_weight +
  model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MechaCar_mpg_table,aes(x=vehicle_weight,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter


model <- lm(mpg ~ spoiler_angle,MechaCar_mpg_table) #create linear model
yvals <- model$coefficients['spoiler_angle']*MechaCar_mpg_table$spoiler_angle +
  model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MechaCar_mpg_table,aes(x=spoiler_angle,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter


model <- lm(mpg ~ ground_clearance,MechaCar_mpg_table) #create linear model
yvals <- model$coefficients['ground_clearance']*MechaCar_mpg_table$ground_clearance +
  model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MechaCar_mpg_table,aes(x=ground_clearance,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter


model <- lm(mpg ~ AWD,MechaCar_mpg_table) #create linear model
yvals <- model$coefficients['AWD']*MechaCar_mpg_table$AWD +
  model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(MechaCar_mpg_table,aes(x=AWD,y=mpg)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter

rm
# Deliverable 2
Suspension_Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- Suspension_Coil_table %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),SD=sd(PSI),Variance=var(PSI), .groups = 'keep') #create summary table with multiple columns

lot_summary <- Suspension_Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),Median_PSI=median(PSI),SD=sd(PSI),Variance=var(PSI), .groups = 'keep') #create lot_summary table


# Deliverable 3
# 15.6.2: Use the One-Sample t-Test
t.test(Suspension_Coil_table$PSI,mu=1500) #compare sample versus population means- one-sampl test
# ref: https://cran.r-project.org/web/packages/distributions3/vignettes/one-sample-t-test.html
#ref:https://stackoverflow.com/questions/46654676/how-to-run-a-t-test-on-a-subset-of-data
#ref: https://www.datacamp.com/community/tutorials/subsets-in-r
## subsetting from each manufacturing lot's t.test()

var_lot1 <- Suspension_Coil_table$PSI[Suspension_Coil_table$Manufacturing_Lot=="Lot1"]
var_lot2 <- Suspension_Coil_table$PSI[Suspension_Coil_table$Manufacturing_Lot=="Lot2"]
var_lot3 <- Suspension_Coil_table$PSI[Suspension_Coil_table$Manufacturing_Lot=="Lot3"]

t.test(var_lot1,mu=1500)
t.test(var_lot2,mu=1500)
t.test(var_lot3,mu=1500)

